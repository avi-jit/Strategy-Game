var total_units = 6;//Total units. (not type of units)
var G = 1;
var M = 2;
var I = 3;
var A = 4;
var C = 5;
var speed = new Array(total_units);//No. of steps taken in a day by Char.
speed[G] = 1;
speed[M] = 3;
speed[I] = 1;
speed[A] = 1;
speed[C] = 1;
var attack = new Array(total_units);
attack[G] = 20;
attack[M] = 10;
attack[I] = 30;
attack[A] = 20;
attack[C] = 40;
var health = new Array(total_units);
for(var i = 0; i < health.length; i++)
{
	health[i] = 100;
}
//attack[6] = 20;
//attack[7] = 50;
//attack[8] = 40;
var los = 2;//line of sight of any unit. Could be made into an array later on.
// var los = new Array(total_units);
// los[G] = 2;
// los[M] = 2;
// los[I] = 1;
// los[A] = 3;
// los[C] = 2;
// los[6] = 2;
// los[7] = 2;
// los[8] = 2;
var m = 8;//No. oF COLUMNS. (correspond to x)
var n = 8;//No. of ROWS. (correspond to y)
var total_days = 10;//No use, atlast now.
var destination = [0,0];//x,y coordinates of destination of Char which is selected.
var source = [0,0];//x,y coordinates of source of Char which is selected.
var selected = 0;//the picked unit whose path/destination is to be assigned.
var dead = new Array(total_units);//whether Char is dead or not.
for (var i = 0; i < dead.length; i++) 
{
	dead[i] = false;
}
var know = [
[
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]
],
[
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]
],
[
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]
],
[
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]
],
[
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]
],
[
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]
]
];
// var know = new Array(Char);
// for (var i = know.length - 1; i >= 0; i--) 
// {
// 	know[i] = new Array(total_days);
// 	for (var j = know[i].length - 1; j >= 0; j--) 
// 	{
// 		know[i][j]  = new Array(m);
// 		for (var k = know[i][j].length - 1; k >= 0; k--) 
// 		{
// 			know[i][j][k] = new Array(n);
// 			for (var l = know[i][j][k].length - 1; l >= 0; l--) {
// 				know[i][j][k][l] = 0;
// 			}
// 		}
// 	}
// }
var day = 0;//current day.
var x = new Array(total_units);//x coordiante of Char right now.
for (var i = 0; i < x.length; i++) 
{
	x[i] = 0;
}
var y = new Array(total_units);//y coordiante of Char rght now.
for (var i = 0; i < y.length; i++) 
{
	y[i] = 0;
}
x[1] = 5;y[1] = 5;
x[2] = 1;y[2] = 0;
x[3] = 2;y[3] = 0;

//var x = [0,0];
//var y = [0,0];

var i = 0;//used for looping.
var j = 0;//used for looping.
var k = 0;//used for looping.
var l = 0;//used for looping.
var p = 0;//x coordinate of element on map being displayed. used for looping.
var q = 0;//y coordinate of element on map being displayed. used for looping.

// for(i = 0; i <= total_units; i++)
// {
// 	for(j = 0; j < 100; j++)
// 	{
// 		for(k = 0; k < 8; k++)
// 		{
// 			for(l = 0; l < 8; l++)
// 			{
// 				know[i][j][k][l] = 0;
// 			}
// 		}
// 	}
// }
know[0][0][0][2] = 22;
know[0][2][4][2] = 33;
know[0][0][5][4] = 44;

// var path = [ [[0]] , [[2,2],[2,2],[2,3],[2,4],[2,5]] , [[5,5],[5,5],[4,5],[3,5],[2,5]] , [[7,2],[7,2],[7,3],[7,4],[7,5]] ];
var path = [ [[0]] , [[5,5]] , [[1,0]] , [[2,0]] , [[6,3]] , [[3,0]]]; //3d array for x,y coordinates of the set path for Char at the day specified.
// var path = [[[[0]]] , [[[2],[2]],[[2],[2]],[[2],[3]],[[2],[4]],[[2],[5]]] , [[[5],[5]],[[5],[5]],[[4],[5]],[[3],[5]],[[2],[5]]] , [[[7],[2]],[[7],[2]],[[7],[3]],[[7],[4]],[[7],[5]]] ];
//var path = [[[[0]]] , [[2,2],[2,2],[2,3],[2,4],[2,5]] ]
// var path = new Array(total_units + 1);
// for (var i = 0; i < path.length; i++) 
// {
// 	path[i] = [];
// 	path[i].push([i,0]);
// }

function clicked(element)
{
	var Char = document.getElementById(element.id).innerHTML.toString().charAt(0);
	if(selected && Char == '')
	{
		document.getElementById("x" + source[0] + "" + source[1]).style.backgroundColor = "yellow";
		destination[0] = parseInt(element.id.slice(1,2).toString());
		destination[1] = parseInt(element.id.slice(2,3).toString());
		setPath(source[0],source[1],destination[0],destination[1],selected);
		//document.getElementById("x" + (selected - 1) + "0").innerHTML = path[selected][0][0] + "" + path[selected][0][1] + "" + path[selected][1][0] + "" + path[selected][1][1] + "" + path[selected][2][0] + "" + path[selected][2][1] + "" + path[selected][3][0] + "" + path[selected][3][1] + "" + path[selected][4][0] + "" + path[selected][4][1];
		selected = 0;
	}
	else if(!selected && Char != '')
	{
		selected = Char;
		source[0] = parseInt(element.id.slice(1,2).toString());
		source[1] = parseInt(element.id.slice(2,3).toString());
		document.getElementById(element.id).style.backgroundColor = "green";
	}
}

function setPath(c0,c1,d0,d1,ch)
{
	if(c0 < d0)
	{
		for(var a = c0 + 1; a <= d0; a++)
		{
			path[ch].push([a,c1]);
		}
	}
	else
	{
		for(var a = c0 - 1; a >= d0; a--)
		{
			path[ch].push([a,c1]);
		}
	}
	if(c1 < d1)
	{
		for(var a = c1 + 1; a <= d1; a++)
		{
			path[ch].push([d0,a]);
		}
	}
	else
	{
		for(var a = c1 - 1; a >= d1; a--)
		{
			path[ch].push([d0,a]);
		}
	}
	
}

function play() 
{
	document.getElementById("x37").textContent = "" + https://rolz.org/api/?1d6.txt;

	day++;
	for(var Char = 1; Char < total_units; Char++)
	{
		if(dead[Char] == true)
		{
			continue;
		}
		if(path[Char].length <= day * speed[Char])
		{
			for(var i = 0; i < speed[Char]; i++)
			{
				path[Char].push([path[Char][path[Char].length - 1][0],path[Char][path[Char].length - 1][1]]);
			}
		}

		know[0][day][x[Char]][y[Char]] = 0;
		document.getElementById("x" + x[Char] + "" + y[Char]).innerHTML = "";
		x[Char] = parseInt(path[Char][day*speed[Char]][0]);
		y[Char] = parseInt(path[Char][day*speed[Char]][1]);
		if(know[0][day][x[Char]][y[Char]] == 0)
		{
			know[0][day][x[Char]][y[Char]] = Char;
		}
		else
		{
			exchange(Char,know[0][day][x[Char]][y[Char]]);
			exchange(know[0][day][x[Char]][y[Char]],Char);
			know[0][day-1][parseInt(path[Char][(day-1)*speed[Char]][0])][parseInt(path[Char][(day-1)*speed[Char]][1])] = Char;
			document.getElementById("x" + parseInt(path[Char][(day-1)*speed[Char]][0]) + "" + parseInt(path[Char][(day-1)*speed[Char]][1])).innerHTML = Char;
			document.getElementById("x37").innerHTML = know[1][5][4][2];

		}
		//document.getElementById("x7" + Char).innerHTML = Char;
	}

	//two separate loops must be there actually, one for setting previous location to "" and another for setting new location to <Char>.
	
	for(var Char = 1; Char <= total_units; Char++)
	{
		
		if(dead[Char] == true)
		{
			continue;
		}
		for(q = y[Char] - los; q <= (y[Char] + los); q++)
		{
			for(p = x[Char] - los; p <= (x[Char] + los); p++)
			{
				if(p >= 0 && p < m && q >= 0 && q < n)
				{
					know[Char][day][p][q] = know[0][day][p][q];
					if(know[0][day][p][q])
					{
						document.getElementById("x" + p + "" + q).innerHTML = know[0][day][p][q];
					}
				}
			}
		}
	}

	// for(q = y[G] - los; q <= (y[G] + los); q++)
	// {
	// 	for(p = x[G] - los; p <= (x[G] + los); p++)
	// 	{
	// 		if(p >= 0 && p < 8 && q >= 0 && q < 8)
	// 		{
	// 			know[G][day][p][q] = know[0][day][p][q];
	// 			if(know[0][day][p][q])
	// 			{
	// 				document.getElementById("x" + p + "" + q).innerHTML = know[0][day][p][q];
	// 			}
	// 		}
	// 	}
	// }
	//The above is for when only what the general sees, we see.

// WHY THE FUCK DOES UNCOMMENTING THIS MAKE IT WRONG?

	// for(var Char = 1; Char <= total_units; Char++)
	// {
	// 	for(i = x[Char] - los; i <= x[Char] + los; i++)
	// 	{
	// 		for(j = y[Char] - los; j <= y[Char] + los; j++)
	// 		{
	// 			if(i >= 0 && i < m && j >= 0 && j < n)
	// 			{
	// 				if((know[0][day][i][j]+Char>5) && (know[0][day][i][j]>0) && (know[0][day][i][j]<=total_units))
	// 				{
	// 					health[know[0][day][i][j]] - = attack[Char];
	// 					if(health[know[0][day][i][j]] <= 0)
	// 					{
	// 						dead[know[0][day][i][j]] = true;
	// 						document.getElementById("x"+x[know[0][day][i][j]]+""+y[know[0][day][i][j]]).innerHTML = "";
	// 					}
	// 				}
	// 			}
	// 		}
	// 	}
	// }


		document.getElementById("x47").innerHTML = know[3][2][4][2];
		document.getElementById("x57").innerHTML = know[2][2][4][2];
		document.getElementById("x67").innerHTML = know[1][2][4][2];
		document.getElementById("x77").innerHTML = know[0][2][4][2];
}

function exchange (a,b) 
{
	for (var i = 0; i <= day; i++ )
	{
		// for (p = path[b][path[b][i]][0] - los; p <= path[b][path[b][i]][0] + los; p++ )
		// {
		// 	for (q = path[b][path[b][i]][1] - los; q <= path[b][path[b][i]][1] + los ; q++) 
		// 	{
		// 		document.getElementById("x07").innerHTML = "000";
		// 		know[a][i][p][q] = know[0][i][p][q];
		// 		document.getElementById("x17").innerHTML = know[a][i][j][k];
		// 	}
		// }
		for (p = 0; p < m; p++ )
		{
			for (q = 0; q < n ; q++) 
			{
				if(!know[a][i][p][q])
					know[a][i][p][q] = know[b][i][p][q];
			}
		}
	}
}